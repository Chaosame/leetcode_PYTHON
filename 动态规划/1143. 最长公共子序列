# 实现
思路1:dp用一个二维数组dp[i][j]表示text1在下标i-1处和text2在下标j-1处的最长公共子序列的长度,其余分析
完全一致
```
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        # dp问题dp[i,j]=dp[i-1,j-1]+1 (ai=bj)  dp[i,j]=max(dp[i-1,j],dp[i,j-1]) (ai!=bj)
        len1,len2 = len(text1),len(text2)
        dp = [[0 for _ in range(len1+1)] for _ in range(len2+1)]
        print (dp)
        for i in range(1,len2+1):
            for j in range(1,len1+1):
                if text1[j-1]==text2[i-1]:
                    dp[i][j]=dp[i-1][j-1]+1
                else:
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j])
        return dp[len2][len1]
```
# 优化
状态压缩进一步降低空间复杂度