# 思路 
双指针 快慢指针 快指针每次多走一步 如果相遇了 说明有环 
如果有一个指针是空的 那么 无环 对快指针的检查应该有两次
快指针肯定先到末尾的
# 实现
```
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head:
            return False
        # 快慢指针
        slow = head
        fast = head.next
        while(slow != fast): 
            if not fast or not fast.next: # 没有环 快指针肯定先到末尾
                return False
            slow = slow.next
            fast = fast.next.next
        return True
``` 