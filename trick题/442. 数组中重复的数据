# 初次实现
```
class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        nums.sort()
        print(nums)
        return [nums[i] for i in range(len(nums)) if i+1<len(nums) and nums[i+1]==nums[i]]
```

# 升华，要求就地 无任何额外开销并且o(n)
### 思路
这题特殊在数组中的所有数字都是正数，并且1<a[i]<n(n为数组长度)能不能借助数组本身的序号去建立映射呢？
有办法！ 由于1<a[i]<n(n为数组长度)，那么|a[i]|-1是 0< <n-1的 这个值是可以用数组本身的序号去表示的
如何表示呢？ 由于一开始所有的树是正数 我们如果访问过 a[i] 就把a[i]-1位置的数取相反数，这样就可以表示
访问过了 但是这样有可能改变后面没访问的数 因此遍历中每次我们都取绝对值来消除影响
```
class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        nums_len = len(nums)
        res = []
        for i in range(nums_len):
            if nums[abs(nums[i])-1]<0:
                res.append(abs(nums[i]))
            nums[abs(nums[i])-1] *= -1
        return res
```
            
